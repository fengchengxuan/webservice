<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	
	<!-- 开启Bean自动扫描 -->
	<context:component-scan base-package="com.fc.*">
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
</context:component-scan>

		<!-- 对静态资源文件的访问 -->
	<mvc:default-servlet-handler/>
	<!-- 静态资源不拦截 -->
	<mvc:resources mapping="/static/**" location="/static/" />

	<!-- 开启SpringMVC注解 -->
	<mvc:annotation-driven>
		<!-- 配置注解的json返回 -->
		<mvc:message-converters register-defaults="true">
			<!-- @ResponseBody乱码问题，将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8"></constructor-arg>
			</bean>
			<!-- 配置Fastjson支持 -->
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json</value>
					</list>
				</property>
				<property name="features">
					<list>
						<!-- 输出key时是否使用双引号,默认为true -->
						<value>WriteMapNullValue</value>
						<!-- 是否输出值为null的字段,默认为false -->
						<value>QuoteFieldNames</value>
						<!-- 字符类型字段如果为null,输出为"",而非null -->
						<value>WriteNullStringAsEmpty</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<!--<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />-->
		<property name="prefix" value="/WEB-INF/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"/>
		<!-- 指定所上传文件的总大小不能超过1000KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="1000000000"/>
	</bean>

	<!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到错误页面 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">fof</prop>
			</props>
		</property>
	</bean>

	<!--消息转换器-->
	<!--<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">-->
		<!--<property name="supportedMediaTypes">-->
			<!--<list>-->
				<!--<value>application/json;charset=UTF-8</value>-->
				<!--<value>text/html;charset=UTF-8</value>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->

	<!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">-->
		<!--<property name="messageConverters">-->
			<!--<list>-->
				<!--<ref bean="mappingJacksonHttpMessageConverter"/>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->

	 <!--<mvc:interceptors>-->
		<!--&lt;!&ndash; 直接在mvc:interceptors下定义的拦截器是全局的 &ndash;&gt;-->
		<!--<bean id="MyInterceptor" class="com.fc.util.MyInterceptor"></bean>-->
		  <!--<mvc:interceptor>-->
			<!--&lt;!&ndash; 在 mvc:interceptor定义的拦截器是局部的&ndash;&gt;-->
			<!--<mvc:mapping path="/vip"/>-->
			 <!--<bean id="myInterceptor" class="com.fc.util.MyInterceptor"></bean>-->
		 <!--</mvc:interceptor>-->
	 <!--</mvc:interceptors>-->

       
</beans>